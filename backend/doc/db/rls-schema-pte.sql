--条件付き注文履歴ID順序
CREATE SEQUENCE RLS_COND_ORDER_HISTORY_ID_SEQ
  START WITH 1
  NOMAXVALUE;

--条件付き注文ID順序
CREATE SEQUENCE RLS_COND_ORDER_ID_SEQ
  START WITH 1
  INCREMENT BY 1000
  NOMAXVALUE;

--条件付き注文OP順序
CREATE SEQUENCE RLS_COND_ORDER_OP_SEQ
  START WITH 1
  INCREMENT BY 1000
  NOMAXVALUE;

--条件付き注文順序
CREATE SEQUENCE RLS_COND_ORDER_SEQ
  START WITH 1
  NOMAXVALUE;

--ルールイベント順序
CREATE SEQUENCE RLS_EVENT_SEQ
  START WITH 1
  NOMAXVALUE;

--市場応答順序
CREATE SEQUENCE RLS_MARKET_RSP_SEQ
  START WITH 1
  INCREMENT BY 1000;

--OMS注文ID順序
CREATE SEQUENCE RLS_OMS_ORDER_ID_SEQ
  START WITH 1
  INCREMENT BY 1000
  NOMAXVALUE;

--OMS注文順序
CREATE SEQUENCE RLS_OMS_ORDER_SEQ
  START WITH 1
  NOMAXVALUE;

--アカウント
CREATE TABLE RLS_ACCOUNT
(
  ID  NUMBER   NOT NULL
)
TABLESPACE WBRK3_REF_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3)
PARTITION BY range(id)
(PARTITION P1 VALUES LESS THAN (116800000000001),
 PARTITION P2 VALUES LESS THAN (133600000000001),
 PARTITION P3 VALUES LESS THAN (150400000000001),
 PARTITION P4 VALUES LESS THAN (167200000000001),
 PARTITION P5 VALUES LESS THAN (184000000000001),
 PARTITION P6 VALUES LESS THAN (MAXVALUE));

--条件付き注文
CREATE TABLE RLS_COND_ORDER
(
  ID          NUMBER(38)                        NOT NULL,
  TYPE        NUMBER                            NOT NULL,
  PARENT_ID   NUMBER,
  STATUS      NUMBER(1)                         DEFAULT 0                     NOT NULL,
  ACCOUNT_ID  NUMBER                            NOT NULL,
  SEQ_NUM     NUMBER                            NOT NULL,
  ACT_RATIO   NUMBER                            DEFAULT 1                     NOT NULL,
  TSTAMP      TIMESTAMP(9)                      DEFAULT SYSTIMESTAMP          NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3)
PARTITION BY range(account_id)
(PARTITION P1 VALUES LESS THAN (116800000000001),
 PARTITION P2 VALUES LESS THAN (133600000000001),
 PARTITION P3 VALUES LESS THAN (150400000000001),
 PARTITION P4 VALUES LESS THAN (167200000000001),
 PARTITION P5 VALUES LESS THAN (184000000000001),
 PARTITION P6 VALUES LESS THAN (MAXVALUE));

--条件付き注文履歴
CREATE TABLE RLS_COND_ORDER_HIST
(
  ID             NUMBER                         NOT NULL,
  COND_ORD_ID    NUMBER                         NOT NULL,
  OP_TYPE        NUMBER                         NOT NULL,
  TIMESTAMP      TIMESTAMP(9)                   DEFAULT SYSTIMESTAMP          NOT NULL,
  OP_ID          NUMBER                         NOT NULL,
  P_PRICE        NUMBER,
  P_DIRECTION    NUMBER,
  T_EXEC_TIME    DATE,
  OMS_EXEC_TYPE  NUMBER,
  OMS_ORIG_QTY   NUMBER,
  OMS_PRICE      NUMBER,
  EVENT_SEQ_NUM  NUMBER                         NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3);

--OMS注文
CREATE TABLE RLS_OMS_ORDER
(
  ACCOUNT_ID   NUMBER                           NOT NULL,
  ORD_ID       NUMBER                           NOT NULL,
  PROD_ID      NUMBER                           NOT NULL,
  MARKET_ID    NUMBER                           NOT NULL,
  ORD_TYPE     NUMBER                           NOT NULL,
  EXEC_TYPE    NUMBER                           NOT NULL,
  SIDE         NUMBER                           NOT NULL,
  ORIG_QTY     NUMBER                           NOT NULL,
  PRICE        NUMBER,
  COND_ORD_ID  NUMBER                           NOT NULL,
  TSTAMP       TIMESTAMP(9)                     DEFAULT SYSTIMESTAMP          NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3)
PARTITION BY range(account_id)
(PARTITION P1 VALUES LESS THAN (116800000000001),
 PARTITION P2 VALUES LESS THAN (133600000000001),
 PARTITION P3 VALUES LESS THAN (150400000000001),
 PARTITION P4 VALUES LESS THAN (167200000000001),
 PARTITION P5 VALUES LESS THAN (184000000000001),
 PARTITION P6 VALUES LESS THAN (MAXVALUE));

--ルールエンジン作成OMS注文
CREATE TABLE RLS_OMS_ORDER_GEN
(
  ID           NUMBER                           NOT NULL,
  INIT_ORD_ID  NUMBER                           NOT NULL,
  EXEC_TYPE    NUMBER                           NOT NULL,
  ORIG_QTY     NUMBER                           NOT NULL,
  PRICE        NUMBER,
  ORD_TYPE     NUMBER                           NOT NULL,
  SEQ_NMBR     NUMBER                           NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3);

--値段条件
CREATE TABLE RLS_PRICE_COND
(
  COND_ORD_ID  NUMBER                           NOT NULL,
  PRICE        NUMBER                           NOT NULL,
  DIRECTION    NUMBER                           NOT NULL,
  PROD_ID      NUMBER                           NOT NULL,
  MARKET_ID    NUMBER                           NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3);

--ティッカー
CREATE TABLE RLS_TICKER
(
  PROD_ID    NUMBER                             NOT NULL,
  MARKET_ID  NUMBER                             NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3);

--タイム条件
CREATE TABLE RLS_TIME_COND
(
  COND_ORD_ID  NUMBER                           NOT NULL,
  EXEC_TIME    DATE                             NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80
STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE INDEX XIE1RLS_COND_ORDER ON RLS_COND_ORDER(ACCOUNT_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3) LOCAL;


CREATE INDEX XIE2RLS_COND_ORDER ON RLS_COND_ORDER(PARENT_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3) LOCAL;


CREATE UNIQUE INDEX XPKRLS_OMS_ORDER_GEN ON RLS_OMS_ORDER_GEN(ID, ORD_TYPE)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_OMS_ORDER ON RLS_OMS_ORDER(ORD_ID, ORD_TYPE)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_ACCOUNT ON RLS_ACCOUNT(ID)
TABLESPACE WBRK3_REF_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3) LOCAL;

CREATE UNIQUE INDEX XPKRLS_COND_ORDER ON RLS_COND_ORDER(ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_COND_ORD_HIST ON RLS_COND_ORDER_HIST(ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_PRICE_COND ON RLS_PRICE_COND(COND_ORD_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_TICKER ON RLS_TICKER(PROD_ID, MARKET_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_TIME_COND ON RLS_TIME_COND(COND_ORD_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


--チェーン条件
CREATE TABLE RLS_CHAIN_COND
(
  COND_ORD_ID  NUMBER                           NOT NULL,
  INCREMENTAL  NUMBER                           NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80 STORAGE(FREELISTS 8 FREELIST GROUPS 3);

--市場応答
CREATE TABLE RLS_MARKET_RSP
(
  ACT_ID         NUMBER                         NOT NULL,
  RSP_TYPE       NUMBER                         NOT NULL,
  ORD_ID         NUMBER                         NOT NULL,
  QTY            NUMBER                         NOT NULL,
  FAILED_QTY     NUMBER,
  REJECTED       NUMBER                         NOT NULL,
  ORD_TYPE       NUMBER                         NOT NULL,
  TSTAMP         TIMESTAMP(9)                   DEFAULT SYSTIMESTAMP          NOT NULL,
  EVENT_SEQ_NUM  NUMBER                         NOT NULL
)
TABLESPACE WBRK3_UPD_DATA01 PCTFREE 20 PCTUSED 80 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE INDEX XIE1RLS_MARKET_RSP ON RLS_MARKET_RSP(ORD_ID, ORD_TYPE)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_CHAIN_COND ON RLS_CHAIN_COND(COND_ORD_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);


CREATE UNIQUE INDEX XPKRLS_MARKET_RSP ON RLS_MARKET_RSP(ACT_ID)
TABLESPACE WBRK3_UPD_INDEX01 PCTFREE 10 STORAGE(FREELISTS 8 FREELIST GROUPS 3);

ALTER TABLE RLS_ACCOUNT ADD (
  CONSTRAINT RLS_ACCOUNT_PK PRIMARY KEY (ID) USING INDEX);

ALTER TABLE RLS_COND_ORDER ADD (
  CONSTRAINT RLS_COND_ORDER_PK PRIMARY KEY (ID) USING INDEX );

ALTER TABLE RLS_COND_ORDER_HIST ADD (
  CONSTRAINT RLS_COND_ORD_HIST_PK PRIMARY KEY (ID) USING INDEX );

ALTER TABLE RLS_OMS_ORDER ADD (
  CONSTRAINT RLS_OMS_ORDER_PK PRIMARY KEY (ORD_ID, ORD_TYPE) USING INDEX );

ALTER TABLE RLS_OMS_ORDER_GEN ADD (
  CONSTRAINT RLS_OMS_ORDER_GEN_PK PRIMARY KEY (ID, ORD_TYPE) USING INDEX );

ALTER TABLE RLS_PRICE_COND ADD (
  CONSTRAINT RLS_PRICE_COND_PK PRIMARY KEY (COND_ORD_ID) USING INDEX );

ALTER TABLE RLS_TICKER ADD (
  CONSTRAINT RLS_TICKER_PK PRIMARY KEY (PROD_ID, MARKET_ID) USING INDEX );

ALTER TABLE RLS_TIME_COND ADD (
  CONSTRAINT RLS_TIME_COND_PK PRIMARY KEY (COND_ORD_ID) USING INDEX );

ALTER TABLE RLS_CHAIN_COND ADD (
  CONSTRAINT RLS_CHAIN_COND_PK PRIMARY KEY (COND_ORD_ID) USING INDEX );

ALTER TABLE RLS_MARKET_RSP ADD (
  CONSTRAINT RLS_MARKET_RSP_PK PRIMARY KEY (ACT_ID) USING INDEX );

ALTER TABLE RLS_COND_ORDER_HIST ADD (
  CONSTRAINT RLS_COND_ORDER_HIST_FK FOREIGN KEY (COND_ORD_ID) 
    REFERENCES RLS_COND_ORDER (ID));

ALTER TABLE RLS_OMS_ORDER ADD (
  CONSTRAINT RLS_OMS_ORDER_FK FOREIGN KEY (COND_ORD_ID) 
    REFERENCES RLS_COND_ORDER (ID));

ALTER TABLE RLS_OMS_ORDER_GEN ADD (
  CONSTRAINT RLS_OMS_ORDER_GEN_FK FOREIGN KEY (INIT_ORD_ID, ORD_TYPE) 
    REFERENCES RLS_OMS_ORDER (ORD_ID,ORD_TYPE));

ALTER TABLE RLS_PRICE_COND ADD (
  CONSTRAINT RLS_PRICE_COND_FK FOREIGN KEY (COND_ORD_ID) 
    REFERENCES RLS_COND_ORDER (ID));

ALTER TABLE RLS_TIME_COND ADD (
  CONSTRAINT RLS_TIME_COND_FK FOREIGN KEY (COND_ORD_ID) 
    REFERENCES RLS_COND_ORDER (ID));

ALTER TABLE RLS_CHAIN_COND ADD (
  CONSTRAINT RLS_CHAIN_COND_FK FOREIGN KEY (COND_ORD_ID) 
    REFERENCES RLS_COND_ORDER (ID));

ALTER TABLE RLS_MARKET_RSP ADD (
  CONSTRAINT RLS_MARKET_RSP_FK FOREIGN KEY (ORD_ID, ORD_TYPE) 
    REFERENCES RLS_OMS_ORDER_GEN (ID,ORD_TYPE));
    
CREATE OR REPLACE VIEW RLS_COND_ORD_HUMAN
(ID, PARENT_ID, TYPE, STATUS, ACCOUNT_ID, SEQ_NUM, ACT_RATIO, TSTAMP)
AS 
SELECT ID, PARENT_ID, 
DECODE(TYPE, 1, 'SIMPLE', 2, 'PRICE', 3, 'TIME', 4, 'EXCLUSIVE', 5, 'CHAIN') AS type, 
DECODE(STATUS, 0, 'PENDING', 2, 'ACTIVATED', 3, 'CANCELED', 4, 'COMPLETED') AS status,
ACCOUNT_ID,SEQ_NUM,ACT_RATIO,TSTAMP FROM rls_cond_order;
    
--OMS注文約定数量
CREATE OR REPLACE VIEW RLS_OMS_ORDER_EXEC_QTY
(ORD_ID, ORD_TYPE, EXEC_QTY)
AS 
SELECT r.ord_id, r.ord_type, SUM(r.qty) AS exec_qty FROM rls_market_rsp r WHERE r.rsp_type=4 GROUP BY r.ord_id, r.ord_type;

--OMS注文EX
CREATE OR REPLACE VIEW RLS_OMS_ORDER_EX
(ACCOUNT_ID, ORD_ID, PROD_ID, MARKET_ID, ORD_TYPE, EXEC_TYPE, SIDE, ORIG_QTY, PRICE, COND_ORD_ID, 
 TSTAMP, GO_ID, GO_EXEC_TYPE, GO_ORIG_QTY, GO_PRICE, EXEC_QTY)
AS 
SELECT o.*, og.id as go_id, og.exec_type as go_exec_type, og.orig_qty as go_orig_qty, og.price as go_price, ex.exec_qty
FROM
rls_oms_order o
LEFT JOIN rls_oms_order_gen og ON og.init_ord_id = o.ord_id AND og.ord_type = o.ord_type
LEFT JOIN rls_oms_order_exec_qty ex ON og.id = ex.ord_id AND og.ord_type = ex.ord_type;

