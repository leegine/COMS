head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2011.04.07.02.09.19;	author zhang-tengyu;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	5444d9d078c63f4;
filename	WEB3AccOpenExpAccountOpenTest.java;


desc
@@


1.1
log
@*** empty log message ***
@
text
@package webbroker3.accountopen;

import java.util.List;

import com.fitechlabs.xtrade.kernel.data.DataNetworkException;
import com.fitechlabs.xtrade.kernel.data.DataQueryException;
import com.fitechlabs.xtrade.kernel.data.Processors;
import com.fitechlabs.xtrade.plugin.tc.gentrade.BooleanEnum;
import com.fitechlabs.xtrade.plugin.tc.gentrade.GtlUtils;
import com.fitechlabs.xtrade.plugin.tc.gentrade.NotFoundException;

import test.util.TestDBUtility;

import webbroker3.accountopen.data.ExpAccountOpenParams;
import webbroker3.accountopen.data.ExpAccountOpenRow;
import webbroker3.common.WEB3BaseException;
import webbroker3.common.WEB3BusinessLayerException;
import webbroker3.common.WEB3ErrorCatalog;
import webbroker3.common.WEB3SystemLayerException;
import webbroker3.gentrade.data.EraParams;
import webbroker3.mock.TestBaseForMock;
import webbroker3.util.WEB3DateUtility;
import webbroker3.util.WEB3LogUtility;


/**
Copyright        : (株)大和総研 証券ソリューションシステム第二部
File Name        : 口座開設見込客(WEB3AccOpenExpAccountOpen)
Author Name      : Daiwa Institute of Research
Revesion History : 2008/12/12 劉仁和 (中訊) 新規作成 仕様変更 モデル No.158
*/
public class WEB3AccOpenExpAccountOpenTest extends TestBaseForMock
{

    /**
     * ログ出力ユーティリティ。
     */
    private static WEB3LogUtility log =
        WEB3LogUtility.getInstance(WEB3AccOpenExpAccountOpenTest.class);

    public WEB3AccOpenExpAccountOpenTest(String arg0)
    {
        super(arg0);
    }

    protected void setUp() throws Exception
    {
        super.setUp();
        TestDBUtility.deleteAll(EraParams.TYPE);
        EraParams l_eraParams = this.getEraParams();
        l_eraParams.setJapaneseEraDiv(1);
        TestDBUtility.insertWithDel(l_eraParams);
    }

    protected void tearDown() throws Exception
    {
        super.tearDown();
    }

    /**
     * (delete口座開設見込客)<BR>
     * 口座開設見込客テーブルのレコードを物理削除する。
     * <BR>
     * １）　@口座開設見込客行オブジェクト取得<BR>
     * 　@口座開設見込客.getDataSourceObject()にて口座開設見込客行を取得する
     * <BR>
     * ２）　@DB削除<BR>
     * 　@口座開設見込客テーブルより口座開設見込客行オブジェクトを削除（delete）する。<BR>
     */
    public void testDeleteAccOpenExpAccountOpen_Case001()
    {
        final String STR_METHOD_NAME = "testDeleteAccOpenExpAccountOpen_Case001()";
        log.entering(STR_METHOD_NAME);

        try
        {
            TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

            ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

            TestDBUtility.insertWithDel(l_expAccountOpenParams);

            WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen("0D", "381", "2512246");

            l_accOpenExpAccountOpen.deleteAccOpenExpAccountOpen();
        }
        catch (WEB3BaseException l_ex)
        {
            log.error(l_ex.getErrorMessage(),l_ex);
            fail();
        }
        catch (NotFoundException l_ex) 
        {
            log.error(l_ex.getMessage());
            fail();
        }
        
        log.exiting(STR_METHOD_NAME);
    }
    
   /*
    * true
    * 
    * 口座開設見込客データが削除可能を判定する。
    * 
    * ○　@口座開設未開設（this.get口座開設状況区分() が 0：　@DEFAULT（未開設））の場合、trueを返却する。
    * 　@　@以外の場合、falseを返却する
    */
    public void testIsDeletePossible_Case001()
    { 
        final String STR_METHOD_NAME = "testIsDeletePossible_Case001()";
        log.entering(STR_METHOD_NAME);
        
        try
        {
            TestDBUtility.deleteAllAndCommit(ExpAccountOpenParams.TYPE);

            ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

            WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

            boolean l_blnIsDeletePossible = l_accOpenExpAccountOpen.isDeletePossible();

            assertTrue(l_blnIsDeletePossible);

        }
        catch (Exception l_ex)
        {
            log.error(l_ex.getMessage());
            fail();
        }
        log.exiting(STR_METHOD_NAME);
    }
    
    /*
     * false
     * 
     * 口座開設見込客データが削除可能を判定する。
     * 
     * ○　@口座開設未開設（this.get口座開設状況区分() が 0：　@DEFAULT（未開設））の場合、trueを返却する。
     * 　@　@以外の場合、falseを返却する
     */
     public void testIsDeletePossible_Case002()
     { 
         final String STR_METHOD_NAME = "testIsDeletePossible_Case002()";
         log.entering(STR_METHOD_NAME);
         
         try
         {
             TestDBUtility.deleteAllAndCommit(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             l_expAccountOpenParams.setAccountOpenDate(WEB3DateUtility.getDate("20080506","yyyyMMdd"));

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                 new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             boolean l_blnIsDeletePossible = l_accOpenExpAccountOpen.isDeletePossible();

             assertFalse(l_blnIsDeletePossible);

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }

     /*
      * 顧客姓（漢字）を取得する=="内藤　@四郎"
      */
     public void testGetAccountFamilyName_Case001()
     {
         final String STR_METHOD_NAME = "testGetAccountFamilyNameCase001()";
         log.entering(STR_METHOD_NAME);

         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             String l_strFamilyName = l_accOpenExpAccountOpen.getAccountFamilyName();

             assertEquals(l_strFamilyName, "内藤　@四郎");

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }

         log.exiting(STR_METHOD_NAME);
     }

     /*
      * 顧客名（漢字）を取得する=="太郎"
      */
     public void testGetAccountName_Case001()
     {
         final String STR_METHOD_NAME = "testGetAccountNameCase001()";
         log.entering(STR_METHOD_NAME);

         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             String l_strFamilyName = l_accOpenExpAccountOpen.getAccountName();

             assertEquals(l_strFamilyName, "太郎");

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }

         log.exiting(STR_METHOD_NAME);
     }

     /*
      * 住所１（カナ）を取得する=="SiroSiroSiroSiroSiro1"
      */
     public void testGetAddressKana1_Case001()
     {
         final String STR_METHOD_NAME = "testGetAddressKana1_Case001()";
         log.entering(STR_METHOD_NAME);

         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro1");

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             String l_strFamilyName = l_accOpenExpAccountOpen.getAddressKana1();

             assertEquals(l_strFamilyName, "SiroSiroSiroSiroSiro1");

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }

         log.exiting(STR_METHOD_NAME);
     }

     /*
      * 住所2（カナ）を取得する=="SiroSiroSiroSiroSiro2"
      */
     public void testGetAddressKana2_Case001()
     {
         final String STR_METHOD_NAME = "testGetAddressKana2_Case001()";
         log.entering(STR_METHOD_NAME);

         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro2");

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             String l_strFamilyName = l_accOpenExpAccountOpen.getAddressKana1();

             assertEquals(l_strFamilyName, "SiroSiroSiroSiroSiro2");

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }

         log.exiting(STR_METHOD_NAME);
     }

     /*
      * 住所3（カナ）を取得する=="SiroSiroSiroSiroSiro3"
      */
     public void testGetAddressKana3_Case001()
     {
         final String STR_METHOD_NAME = "testGetAddressKana3_Case001()";
         log.entering(STR_METHOD_NAME);

         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);

             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();

             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");

             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             String l_strFamilyName = l_accOpenExpAccountOpen.getAddressKana1();

             assertEquals(l_strFamilyName, "SiroSiroSiroSiroSiro3");

         }
         catch (Exception l_ex)
         {
             log.error(l_ex.getMessage());
             fail();
         }

         log.exiting(STR_METHOD_NAME);
     }

     public void testValidateAccountOpenRegistInfo_Case001()
     {
         final String STR_METHOD_NAME = "testValidateAccountOpenRegistInfo_Case001()";
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("01e107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.validateAccountOpenRegistInfo("4", null);
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             assertEquals(WEB3ErrorCatalog.BUSINESS_ERROR_01312, l_ex.getErrorInfo());
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     public void testValidateAccountOpenRegistInfo_Case002()
     {
         final String STR_METHOD_NAME = "testValidateAccountOpenRegistInfo_Case002()";
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010137");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.validateAccountOpenRegistInfo("4", null);
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             assertEquals(WEB3ErrorCatalog.BUSINESS_ERROR_01312, l_ex.getErrorInfo());
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     public void testValidateAccountOpenRegistInfo_Case003()
     {
         final String STR_METHOD_NAME = "testValidateAccountOpenRegistInfo_Case003()";
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.validateAccountOpenRegistInfo("4", null);
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             assertEquals(WEB3ErrorCatalog.BUSINESS_ERROR_01312, l_ex.getErrorInfo());
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     public EraParams getEraParams()
     {
         EraParams l_eraParams = new EraParams();
         //年号区分    japanese_era_div    NUMBER    1    NotNull    1：明治、2：大正、3：昭和、4：平成、9：不明
         l_eraParams.setJapaneseEraDiv(1);
         //年号    japanese_era    VARCHAR2    20    NotNull    1：明治、2：大正、3：昭和、4：平成、9：不明
         l_eraParams.setJapaneseEra("1");
         //開始年(和暦)    start_year_jap    VARCHAR2    2    NotNull    和暦(YY)
         l_eraParams.setStartYearJap("01");
         //開始年(西暦)    start_year    VARCHAR2    4    NotNull    西暦(YYYY)
         l_eraParams.setStartYear("2008");
         //開始月日    start_date    VARCHAR2    4    NotNull    MMDD
         l_eraParams.setStartDate("0002");
         //終了年(和暦)    end_year_jap    VARCHAR2    2    NotNull    和暦(YY)
         l_eraParams.setEndYearJap("02");
         //終了年(西暦)    end_year    VARCHAR2    4    NotNull    西暦(YYYY)
         l_eraParams.setEndYear("2009");
         //終了月日    end_date    VARCHAR2    4    NotNull    MMDD
         l_eraParams.setEndDate("0102");
         //作成日時    created_timestamp    DATE        NotNull    DEFAULT sysdate
         l_eraParams.setCreatedTimestamp(GtlUtils.getSystemTimestamp());
         //更新日時    last_updated_timestamp    DATE        NotNull    DEFAULT sysdate
         l_eraParams.setLastUpdatedTimestamp(GtlUtils.getSystemTimestamp());
         return l_eraParams;
     }
     
     /**
      * 引数.更新項目が「1：印刷フラグ」の場合、口座開設見込客行.印刷フラグに引数.更新値をセットする。 
      *
      */
     public void test_saveExpAccountOpen_0001()
     {
         final String STR_METHOD_NAME = "test_saveExpAccountOpen_0001()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.saveExpAccountOpen("1", "1", "jj");
             
             String l_strWhere = " institution_code = ? and acc_open_request_number = ? ";
             Object[] l_objConds =  new Object[]{"0D", "2007092899999"};
             List l_lisRecordexcs = null;
             try
             {
                 l_lisRecordexcs = Processors.getDefaultProcessor().doFindAllQuery(
                     ExpAccountOpenParams.TYPE,
                     l_strWhere,
                     l_objConds);
             }
             catch (DataQueryException l_ex)
             {
                 fail();
             }
             catch (DataNetworkException l_ex)
             {
                 fail();
             }
             ExpAccountOpenRow l_expAccountOpenRow = (ExpAccountOpenRow)l_lisRecordexcs.get(0);
             assertEquals("jj", l_expAccountOpenRow.getLastUpdater());
             assertEquals("1", l_expAccountOpenRow.getPrintFlag());
             assertEquals("0", "" + WEB3DateUtility.compareToDay(GtlUtils.getTradingSystem().getBizDate(), l_expAccountOpenRow.getLastUpdatedTimestamp()));
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     /**
      * 引数.更新項目が「2：受領フラグ」の場合、口座開設見込客行.受領フラグに引数.更新値をセットする。 
      *
      */
     public void test_saveExpAccountOpen_0002()
     {
         final String STR_METHOD_NAME = "test_saveExpAccountOpen_0002()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.saveExpAccountOpen("2", "0", "gg");
             
             String l_strWhere = " institution_code = ? and acc_open_request_number = ? ";
             Object[] l_objConds =  new Object[]{"0D", "2007092899999"};
             List l_lisRecordexcs = null;
             try
             {
                 l_lisRecordexcs = Processors.getDefaultProcessor().doFindAllQuery(
                     ExpAccountOpenParams.TYPE,
                     l_strWhere,
                     l_objConds);
             }
             catch (DataQueryException l_ex)
             {
                 fail();
             }
             catch (DataNetworkException l_ex)
             {
                 fail();
             }
             ExpAccountOpenRow l_expAccountOpenRow = (ExpAccountOpenRow)l_lisRecordexcs.get(0);
             assertEquals("gg", l_expAccountOpenRow.getLastUpdater());
             assertEquals("0", l_expAccountOpenRow.getReceiptFlag().intValue() + "");
             assertEquals("0", "" + WEB3DateUtility.compareToDay(GtlUtils.getTradingSystem().getBizDate(), l_expAccountOpenRow.getLastUpdatedTimestamp()));
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     /**
      * 引数.更新項目が「3：削除フラグ」の場合、口座開設見込客行.削除フラグに引数.更新値、口座開設見込客行.削除日時に現在日時をセットする。  
      * リクエスト.削除フラグが「1：無効（削除）」の場合、現在日時
      */
     public void test_saveExpAccountOpen_0003()
     {
         final String STR_METHOD_NAME = "test_saveExpAccountOpen_0003()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.saveExpAccountOpen("3", "1", "gg");
             
             String l_strWhere = " institution_code = ? and acc_open_request_number = ? ";
             Object[] l_objConds =  new Object[]{"0D", "2007092899999"};
             List l_lisRecordexcs = null;
             try
             {
                 l_lisRecordexcs = Processors.getDefaultProcessor().doFindAllQuery(
                     ExpAccountOpenParams.TYPE,
                     l_strWhere,
                     l_objConds);
             }
             catch (DataQueryException l_ex)
             {
                 fail();
             }
             catch (DataNetworkException l_ex)
             {
                 fail();
             }
             ExpAccountOpenRow l_expAccountOpenRow = (ExpAccountOpenRow)l_lisRecordexcs.get(0);
             assertEquals("gg", l_expAccountOpenRow.getLastUpdater());
             assertEquals("1", l_expAccountOpenRow.getDeleteFlag().intValue() + "");
             assertEquals("0", "" + WEB3DateUtility.compareToDay(GtlUtils.getTradingSystem().getBizDate(), l_expAccountOpenRow.getDeleteTimestamp()));
             assertEquals("0", "" + WEB3DateUtility.compareToDay(GtlUtils.getTradingSystem().getBizDate(), l_expAccountOpenRow.getLastUpdatedTimestamp()));
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     /**
      * 引数.更新項目が「3：削除フラグ」の場合、口座開設見込客行.削除フラグに引数.更新値、口座開設見込客行.削除日時に現在日時をセットする。  
      * リクエスト.削除フラグが「0：有効（DEFAULT）」の場合、null
      */
     public void test_saveExpAccountOpen_0004()
     {
         final String STR_METHOD_NAME = "test_saveExpAccountOpen_0004()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);

             l_accOpenExpAccountOpen.saveExpAccountOpen("3", "0", "gg");
             
             String l_strWhere = " institution_code = ? and acc_open_request_number = ? ";
             Object[] l_objConds =  new Object[]{"0D", "2007092899999"};
             List l_lisRecordexcs = null;
             try
             {
                 l_lisRecordexcs = Processors.getDefaultProcessor().doFindAllQuery(
                     ExpAccountOpenParams.TYPE,
                     l_strWhere,
                     l_objConds);
             }
             catch (DataQueryException l_ex)
             {
                 fail();
             }
             catch (DataNetworkException l_ex)
             {
                 fail();
             }
             ExpAccountOpenRow l_expAccountOpenRow = (ExpAccountOpenRow)l_lisRecordexcs.get(0);
             assertEquals("gg", l_expAccountOpenRow.getLastUpdater());
             assertEquals("0", l_expAccountOpenRow.getDeleteFlag().intValue() + "");
             assertNull(l_expAccountOpenRow.getDeleteTimestamp());
             assertEquals("0", "" + WEB3DateUtility.compareToDay(GtlUtils.getTradingSystem().getBizDate(), l_expAccountOpenRow.getLastUpdatedTimestamp()));
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     /**
      * this.口座開設見込客行.削除フラグが「1：TRUE/無効（削除）」の場合、trueを返却する。 
      *
      */
     public void test_isDeleted_0001()
     {
         final String STR_METHOD_NAME = "test_isDeleted_0001()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             l_expAccountOpenParams.setDeleteFlag(BooleanEnum.TRUE);
             l_expAccountOpenParams.setAccOpenRequestNumber("1");
             TestDBUtility.insertWithDel(l_expAccountOpenParams);
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             assertTrue(l_accOpenExpAccountOpen.isDeleted());
             
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     /**
      * this.口座開設見込客行.削除フラグが「0：FALSE」の場合、falseを返却する。 
      *
      */
     public void test_isDeleted_0002()
     {
         final String STR_METHOD_NAME = "test_isDeleted_0002()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setZipCode("1000811");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             l_expAccountOpenParams.setDeleteFlag(BooleanEnum.FALSE);
             l_expAccountOpenParams.setAccOpenRequestNumber("1");
             TestDBUtility.insertWithDel(l_expAccountOpenParams);
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen(l_expAccountOpenParams);

             assertFalse(l_accOpenExpAccountOpen.isDeleted());
             
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     //証券会社コード 部店コード 識別コード 口座コード 
     public void testWEB3AccOpenExpAccountOpenCase1()
     {
         final String STR_METHOD_NAME = "testWEB3AccOpenExpAccountOpenCase1()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setInstitutionCode("0D");
             l_expAccountOpenParams.setBranchCode("381");
             l_expAccountOpenParams.setAccOpenRequestNumber("1");
             l_expAccountOpenParams.setAccountCode("2512246");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             l_expAccountOpenParams.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);
             ExpAccountOpenParams l_expAccountOpenParams1 = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams1.setInstitutionCode("0D");
             l_expAccountOpenParams1.setBranchCode("381");
             l_expAccountOpenParams1.setAccOpenRequestNumber("1");
             l_expAccountOpenParams1.setAccountCode("2512246");
             l_expAccountOpenParams1.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams1.setEraBorn("1");
             l_expAccountOpenParams1.setBornDate("010107");
             l_expAccountOpenParams1.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams1);
             ExpAccountOpenParams l_expAccountOpenParams2 = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams2.setInstitutionCode("0D");
             l_expAccountOpenParams2.setBranchCode("381");
             l_expAccountOpenParams2.setAccOpenRequestNumber("2");
             l_expAccountOpenParams2.setAccountCode("2512246");
             l_expAccountOpenParams2.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams2.setEraBorn("1");
             l_expAccountOpenParams2.setBornDate("010107");
             l_expAccountOpenParams2.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams2);
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen("0D","381",null,"2512246");

             fail();
             
         }
         catch (WEB3BusinessLayerException l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             assertEquals(l_ex.getErrorInfo(), WEB3ErrorCatalog.BUSINESS_ERROR_01313);
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
     
     //証券会社コード 部店コード 識別コード 口座コード 
     public void testWEB3AccOpenExpAccountOpenCase2()
     {
         final String STR_METHOD_NAME = "testWEB3AccOpenExpAccountOpenCase2()";
         log.entering(STR_METHOD_NAME);
         try
         {
             TestDBUtility.deleteAll(ExpAccountOpenParams.TYPE);
             ExpAccountOpenParams l_expAccountOpenParams = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams.setInstitutionCode("0D");
             l_expAccountOpenParams.setBranchCode("381");
             l_expAccountOpenParams.setAccOpenRequestNumber("1");
             l_expAccountOpenParams.setAccountCode("2512246");
             l_expAccountOpenParams.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams.setEraBorn("1");
             l_expAccountOpenParams.setBornDate("010107");
             l_expAccountOpenParams.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams);
             ExpAccountOpenParams l_expAccountOpenParams1 = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams1.setInstitutionCode("0D");
             l_expAccountOpenParams1.setBranchCode("381");
             l_expAccountOpenParams1.setAccOpenRequestNumber("1");
             l_expAccountOpenParams1.setAccountCode("2512246");
             l_expAccountOpenParams1.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams1.setEraBorn("1");
             l_expAccountOpenParams1.setBornDate("010107");
             l_expAccountOpenParams1.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams1);
             ExpAccountOpenParams l_expAccountOpenParams2 = TestDBUtility.getExpAccountOpenRow();
             l_expAccountOpenParams2.setInstitutionCode("0D");
             l_expAccountOpenParams2.setBranchCode("381");
             l_expAccountOpenParams2.setAccOpenRequestNumber("2");
             l_expAccountOpenParams2.setAccountCode("2512246");
             l_expAccountOpenParams2.setAddressLine1Kana("SiroSiroSiroSiroSiro3");
             l_expAccountOpenParams2.setEraBorn("1");
             l_expAccountOpenParams2.setBornDate("010107");
             l_expAccountOpenParams2.setDeleteFlag(BooleanEnum.FALSE);
             TestDBUtility.insertWithDel(l_expAccountOpenParams2);
             WEB3AccOpenExpAccountOpen l_accOpenExpAccountOpen =
                new WEB3AccOpenExpAccountOpen("0D","381","1","2512246");
             assertFalse(l_accOpenExpAccountOpen.isDeleted());
         }
         catch (Exception l_ex)
         {
             l_ex.printStackTrace();
             log.exiting(STR_METHOD_NAME);
             fail();
         }
         log.exiting(STR_METHOD_NAME);
     }
}
@
