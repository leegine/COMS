head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2011.03.15.03.06.24;	author zhang-tengyu;	state Exp;
branches;
next	;
deltatype	text;
kopt	b;
permissions	666;
commitid	8b84d7ecf833551;
filename	gtl_master_triggers.sql;


desc
@@


1.1
log
@*** empty log message ***
@
text
@------------------------------------------------------------------
-- Autogenerated per-table triggers for mutators
------------------------------------------------------------------

--------------------------------------------------
--- branch

create trigger inv_branch_ins
  after insert on branch
  for each row
  declare
  begin
    invalidation.on_mutate( 'branch', 'ins', 0, :new.branch_id );
  end;
/
show errors

create trigger inv_branch_upd
  before update on branch
  for each row
  declare
  begin
    invalidation.on_mutate( 'branch', 'upd', 0, :old.branch_id );
  end;
/
show errors

create trigger inv_branch_del
  before delete on branch
  for each row
  declare
  begin
    invalidation.on_mutate( 'branch', 'del', 0, :old.branch_id );
  end;
/
show errors

--------------------------------------------------
--- institution

create trigger inv_institution_ins
  after insert on institution
  for each row
  declare
  begin
    invalidation.on_mutate( 'institution', 'ins', 0, :new.institution_id );
  end;
/
show errors

create trigger inv_institution_upd
  before update on institution
  for each row
  declare
  begin
    invalidation.on_mutate( 'institution', 'upd', 0, :old.institution_id );
  end;
/
show errors

create trigger inv_institution_del
  before delete on institution
  for each row
  declare
  begin
    invalidation.on_mutate( 'institution', 'del', 0, :old.institution_id );
  end;
/
show errors

--------------------------------------------------
--- limit_price_range_defs

create trigger inv_limit_price_range_defs_ins
  after insert on limit_price_range_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'limit_price_range_defs', 'ins', 0, :new.limit_price_range_defs_id );
  end;
/
show errors

create trigger inv_limit_price_range_defs_upd
  before update on limit_price_range_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'limit_price_range_defs', 'upd', 0, :old.limit_price_range_defs_id );
  end;
/
show errors

create trigger inv_limit_price_range_defs_del
  before delete on limit_price_range_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'limit_price_range_defs', 'del', 0, :old.limit_price_range_defs_id );
  end;
/
show errors

--------------------------------------------------
--- main_account

create trigger inv_main_account_ins
  after insert on main_account
  for each row
  declare
  begin
    invalidation.on_mutate( 'main_account', 'ins', 0, :new.account_id );
  end;
/
show errors

create trigger inv_main_account_upd
  before update on main_account
  for each row
  declare
  begin
    invalidation.on_mutate( 'main_account', 'upd', 0, :old.account_id );
  end;
/
show errors

create trigger inv_main_account_del
  before delete on main_account
  for each row
  declare
  begin
    invalidation.on_mutate( 'main_account', 'del', 0, :old.account_id );
  end;
/
show errors

--------------------------------------------------
--- market

create trigger inv_market_ins
  after insert on market
  for each row
  declare
  begin
    invalidation.on_mutate( 'market', 'ins', 0, :new.market_id );
  end;
/
show errors

create trigger inv_market_upd
  before update on market
  for each row
  declare
  begin
    invalidation.on_mutate( 'market', 'upd', 0, :old.market_id );
  end;
/
show errors

create trigger inv_market_del
  before delete on market
  for each row
  declare
  begin
    invalidation.on_mutate( 'market', 'del', 0, :old.market_id );
  end;
/
show errors

--------------------------------------------------
--- market_calendar

create trigger inv_market_calendar_ins
  after insert on market_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_calendar', 'ins', 0, :new.market_id||','||to_char(:new.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

create trigger inv_market_calendar_upd
  before update on market_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_calendar', 'upd', 0, :old.market_id||','||to_char(:old.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

create trigger inv_market_calendar_del
  before delete on market_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_calendar', 'del', 0, :old.market_id||','||to_char(:old.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

--------------------------------------------------
--- market_preferences

create trigger inv_market_preferences_ins
  after insert on market_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_preferences', 'ins', 0, :new.market_id||','||:new.name||','||:new.name_serial_no );
  end;
/
show errors

create trigger inv_market_preferences_upd
  before update on market_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_preferences', 'upd', 0, :old.market_id||','||:old.name||','||:old.name_serial_no );
  end;
/
show errors

create trigger inv_market_preferences_del
  before delete on market_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'market_preferences', 'del', 0, :old.market_id||','||:old.name||','||:old.name_serial_no );
  end;
/
show errors

--------------------------------------------------
--- product

create trigger inv_product_ins
  after insert on product
  for each row
  declare
  begin
    invalidation.on_mutate( 'product', 'ins', 0, :new.product_id );
  end;
/
show errors

create trigger inv_product_upd
  before update on product
  for each row
  declare
  begin
    invalidation.on_mutate( 'product', 'upd', 0, :old.product_id );
  end;
/
show errors

create trigger inv_product_del
  before delete on product
  for each row
  declare
  begin
    invalidation.on_mutate( 'product', 'del', 0, :old.product_id );
  end;
/
show errors

--------------------------------------------------
--- system_preferences

create trigger inv_system_preferences_ins
  after insert on system_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'system_preferences', 'ins', 0, :new.name );
  end;
/
show errors

create trigger inv_system_preferences_upd
  before update on system_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'system_preferences', 'upd', 0, :old.name );
  end;
/
show errors

create trigger inv_system_preferences_del
  before delete on system_preferences
  for each row
  declare
  begin
    invalidation.on_mutate( 'system_preferences', 'del', 0, :old.name );
  end;
/
show errors

--------------------------------------------------
--- tick_values_defs

create trigger inv_tick_values_defs_ins
  after insert on tick_values_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'tick_values_defs', 'ins', 0, :new.tick_values_defs_id );
  end;
/
show errors

create trigger inv_tick_values_defs_upd
  before update on tick_values_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'tick_values_defs', 'upd', 0, :old.tick_values_defs_id );
  end;
/
show errors

create trigger inv_tick_values_defs_del
  before delete on tick_values_defs
  for each row
  declare
  begin
    invalidation.on_mutate( 'tick_values_defs', 'del', 0, :old.tick_values_defs_id );
  end;
/
show errors

--------------------------------------------------
--- traded_product

create trigger inv_traded_product_ins
  after insert on traded_product
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product', 'ins', 0, :new.traded_product_id );
  end;
/
show errors

create trigger inv_traded_product_upd
  before update on traded_product
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product', 'upd', 0, :old.traded_product_id );
  end;
/
show errors

create trigger inv_traded_product_del
  before delete on traded_product
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product', 'del', 0, :old.traded_product_id );
  end;
/
show errors

--------------------------------------------------
--- traded_product_calendar

create trigger inv_traded_product_calenda_ins
  after insert on traded_product_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_calendar', 'ins', 0, :new.traded_product_id||','||to_char(:new.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

create trigger inv_traded_product_calenda_upd
  before update on traded_product_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_calendar', 'upd', 0, :old.traded_product_id||','||to_char(:old.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

create trigger inv_traded_product_calenda_del
  before delete on traded_product_calendar
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_calendar', 'del', 0, :old.traded_product_id||','||to_char(:old.trade_date, 'YYMMDDHH24MISS') );
  end;
/
show errors

--------------------------------------------------
--- traded_product_updq

create trigger inv_traded_product_updq_ins
  after insert on traded_product_updq
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_updq', 'ins', 0, :new.traded_product_id||','||:new.valid_until_biz_date );
  end;
/
show errors

create trigger inv_traded_product_updq_upd
  before update on traded_product_updq
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_updq', 'upd', 0, :old.traded_product_id||','||:old.valid_until_biz_date );
  end;
/
show errors

create trigger inv_traded_product_updq_del
  before delete on traded_product_updq
  for each row
  declare
  begin
    invalidation.on_mutate( 'traded_product_updq', 'del', 0, :old.traded_product_id||','||:old.valid_until_biz_date );
  end;
/
show errors

--------------------------------------------------
--- trader

create trigger inv_trader_ins
  after insert on trader
  for each row
  declare
  begin
    invalidation.on_mutate( 'trader', 'ins', 0, :new.trader_id );
  end;
/
show errors

create trigger inv_trader_upd
  before update on trader
  for each row
  declare
  begin
    invalidation.on_mutate( 'trader', 'upd', 0, :old.trader_id );
  end;
/
show errors

create trigger inv_trader_del
  before delete on trader
  for each row
  declare
  begin
    invalidation.on_mutate( 'trader', 'del', 0, :old.trader_id );
  end;
/
show errors

@
