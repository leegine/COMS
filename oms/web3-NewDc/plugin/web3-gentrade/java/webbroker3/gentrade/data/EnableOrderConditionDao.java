head	1.1;
access;
symbols;
locks; strict;
comment	@// @;


1.1
date	2011.03.14.05.43.07;	author che-jin;	state Exp;
branches;
next	;
deltatype	text;
kopt	kv;
permissions	666;
commitid	8884d7d97833a75;
filename	EnableOrderConditionDao.java;


desc
@@


1.1
log
@*** empty log message ***
@
text
@package webbroker3.gentrade.data;

import com.fitechlabs.xtrade.kernel.data.*;
import com.fitechlabs.dbind.*;
import java.util.*;
import webbroker3.gentrade.data.*;
import com.fitechlabs.dbind.*;
import com.fitechlabs.xtrade.plugin.tc.eqtype.data.*;
import com.fitechlabs.xtrade.plugin.tc.gentrade.data.*;

/** 
 * {@@link EnableOrderConditionDao}は{@@link com.fitechlabs.xtrade.kernel.data.DataAccessObject}のサブクラスで{@@link EnableOrderConditionRow}インスタンスへ関連付けることができます。 
 * クライアントコードにおいて必要とされる共通のデータオペレーションを実装しています。 
 * <p> 
 *     <li> 新しいレコードに対し一意の主キー値またはオブジェクトを作成 </li> 
 *     <li> 外部キーからレコードを検索 </li> 
 *     <li> 外部キーの関係にあるオブジェクトを検索 </li> 
 *     <li> インデックスを持つ既存のデータベーススキーマにクエリを実行 </li> 
 * <p> 
 * 
 * @@author xTradeコードジェネレータ 
 * 
 * @@see com.fitechlabs.xtrade.kernel.data.DataAccessObject 
 * @@see com.fitechlabs.dbind.PrimaryKey 
 * @@see EnableOrderConditionPK 
 * @@see EnableOrderConditionRow 
 */
public class EnableOrderConditionDao extends DataAccessObject {


  /** 
   * この{@@link EnableOrderConditionDao}に関連する型指定のRowオブジェクト 
   */
    private EnableOrderConditionRow row;


  /** 
   * Rowオブジェクトから新たにDataAccessObjectオブジェクトを作成するため利用されるファ@クトリ 
   */
    public static final Factory FACTORY = new Factory() {

        /** 
         * 指定の{@@link EnableOrderConditionRow}と仮定される{@@link DataAccessObject}から新たに{@@link EnableOrderConditionDao}を返します。 
         * @@return 指定のRowに結びつく{@@link EnableOrderConditionDao}インスタンス 
         * @@exception java.lang.IllegalArgumentException 指定のRowオブジェクトが{@@link EnableOrderConditionRow}のタイプと一致しない場合 
         */
        public DataAccessObject newInstance( Row row ) {
            if ( row instanceof EnableOrderConditionRow )
                return new EnableOrderConditionDao( (EnableOrderConditionRow) row );
            throw new java.lang.IllegalArgumentException( "Not a EnableOrderConditionRow or subclass: "+row.getClass() );
        }
    };


  /** 
   * {@@link EnableOrderConditionRow}を引数に取るコンストラクタです。これはファ@クトリおよびそのサブクラスのみにより利用されます。 
   * @@param row Daoにデータを提供する{@@link EnableOrderConditionRow}オブジェクト 
    */
    protected EnableOrderConditionDao( EnableOrderConditionRow row ) {
        super( row );
        this.row = row;
    }


  /** 
   * このDaoに結びついている{@@link EnableOrderConditionRow}オブジェクトを取得します。
   */
    public EnableOrderConditionRow getEnableOrderConditionRow() {
        return row;
    }


  /** 
   * 指定の{@@link EnableOrderConditionRow}オブジェクトから{@@link EnableOrderConditionDao}オブジェクトを作成します。 
   * これは実際の{@@link EnableOrderConditionRow}クラスインスタンスをベースに戻り値として適切なDaoオブジェクトを 
   * ポリモルフィックに作成します。 
   * 
   * @@param row 必要な{@@link EnableOrderConditionDao}取得のために指定の{@@link EnableOrderConditionRow}オブジェクト 
   * @@return 指定のrowオブジェクトに対応する{@@link EnableOrderConditionDao}オブジェクト 
   * @@exception java.lang.IllegalArgumentException 指定のRowタイプに対応するDaoのタイプが存在しない場合 
   */
    public static EnableOrderConditionDao forRow( EnableOrderConditionRow row ) throws java.lang.IllegalArgumentException {
        return (EnableOrderConditionDao) DataAccessObject.forRow( row );
    }


    //--------------------------------------------
    // Create new primary key values
    //--------------------------------------------


  /** 
   * {@@link EnableOrderConditionRow}を一意に特定するlong型の値を生成します。 
   * この値は{@@link EnableOrderConditionRow}のオブジェクトタイプに対応するものです。 
   * 
   * @@return 新しい{@@link EnableOrderConditionPK}やデータベースレコードとして挿入される{@@link EnableOrderConditionParams}インスタンスの主キーとして利用可能なlong型の値 
   * @@exception DataNetworkException ネットワークまたはその他インフラ関係の障害でクエリが実行できなかった場合 
   * @@exception DataQueryException クエリが実行されても何らかのデータ関連の理由から失敗した場合 
   */
    public static long newPkValue() throws DataNetworkException, DataQueryException {
        QueryProcessor qp = Processors.getDefaultProcessor();
        return qp.doGetNewPkValueQuery( EnableOrderConditionRow.TYPE );
    }


  /** 
   * {@@link EnableOrderConditionRow}を一意に特定する{@@link EnableOrderConditionPK}オブジェクトを生成します。 
   * このオブジェクトは{@@link EnableOrderConditionRow}のオブジェクトタイプに対応するものです。 
   * 
   * @@return データベースへ挿入する新たな{@@link EnableOrderConditionParams}オブジェクトの主キーとして利用可能な{@@link EnableOrderConditionPK}オブジェクト 
   * @@exception DataNetworkException ネットワークまたはその他インフラ関係の障害でクエリが実行できなかった場合 
   * @@exception DataQueryException クエリが実行されても何らかのデータ関連の理由から失敗した場合 
   * @@exception UnsupportedOperationException primary_keyに複数のカラムが含まれているかカラムのタイプがlong型でない場合 
   */
    public static EnableOrderConditionPK newPkObject() throws DataNetworkException, DataQueryException {
      throw new java.lang.UnsupportedOperationException( "auto-generation of primary keys with multiple components not supported." );
    }


    //===========================================================================
    //
    // Find Rows by primary key
    //
    //===========================================================================


  /** 
   * 指定の主キーの値から{@@link EnableOrderConditionRow}オブジェクトを検索します。 
   * 
   * @@param p_institutionCode 検索対象であるp_institutionCodeフィールドの値
   * @@param p_productType 検索対象であるp_productTypeフィールドの値
   * @@param p_futureOptionDiv 検索対象であるp_futureOptionDivフィールドの値
   * @@param p_marginTradingDiv 検索対象であるp_marginTradingDivフィールドの値
   * @@param p_marketCode 検索対象であるp_marketCodeフィールドの値
   * 
   * @@return 引数指定のIDと一致する主キーを持つ{@@link EnableOrderConditionRow} 
   * @@exception DataFindException クエリ自体は実行されたが、指定の主キーにて検索のオブジェクトが見つからなかった場合 
   * @@exception DataQueryException クエリ自体は実行されたが、検索キーが一意でないなど何らかのデータ関連の理由で検索に失敗した場合 
   * @@exception DataNetworkException ネットワークまたはその他インフラ関係の障害でクエリが実行できなかった場合 
   */
    public static EnableOrderConditionRow findRowByPk( String p_institutionCode, com.fitechlabs.xtrade.plugin.tc.gentrade.ProductTypeEnum p_productType, String p_futureOptionDiv, String p_marginTradingDiv, String p_marketCode ) throws DataFindException, DataQueryException, DataNetworkException {
        EnableOrderConditionPK pk = new EnableOrderConditionPK( p_institutionCode, p_productType, p_futureOptionDiv, p_marginTradingDiv, p_marketCode );
        return findRowByPk( pk );
    }


  /** 
   * 指定のEnableOrderConditionPKオブジェクトから{@@link EnableOrderConditionRow}オブジェクトを検索します。 
   * 
   * @@param pk 検索キーとして利用するEnableOrderConditionPKオブジェクト 
   * @@return 引数指定のIDと一致する主キーを持つ{@@link EnableOrderConditionRow} 
   * @@exception DataFindException クエリ自体は実行されたが、指定の主キーにて検索のオブジェクトが見つからなかった場合 
   * @@exception DataQueryException クエリ自体は実行されたが、検索キーが一意でないなど何らかのデータ関連の理由で検索に失敗した場合 
   * @@exception DataNetworkException ネットワークまたはその他インフラ関係の障害でクエリが実行できなかった場合 
   */
    public static EnableOrderConditionRow findRowByPk( EnableOrderConditionPK pk ) throws DataFindException, DataQueryException, DataNetworkException  {
        QueryProcessor qp = Processors.getDefaultProcessor();
        return (EnableOrderConditionRow) qp.doFindByPrimaryKeyQuery( pk, null );
    }


  /** 
   * @@deprecated 代わりに{@@link #findRowByPk(String,com.fitechlabs.xtrade.plugin.tc.gentrade.ProductTypeEnum,String,String,String)}および{@@link #forRow(EnableOrderConditionRow)}を使用してください。 
   */
    public static EnableOrderConditionDao findDaoByPk( String p_institutionCode, com.fitechlabs.xtrade.plugin.tc.gentrade.ProductTypeEnum p_productType, String p_futureOptionDiv, String p_marginTradingDiv, String p_marketCode ) throws DataFindException, DataQueryException, DataNetworkException {
        EnableOrderConditionPK pk = new EnableOrderConditionPK( p_institutionCode, p_productType, p_futureOptionDiv, p_marginTradingDiv, p_marketCode );
        EnableOrderConditionRow row = findRowByPk( pk );
        return forRow( row );
    }


  /** 
   * @@deprecated 代わりに{@@link #findRowByPk(EnableOrderConditionPK)}および{@@link #forRow(EnableOrderConditionRow)}を使用してください。 
   */
    public static EnableOrderConditionDao findDaoByPk( EnableOrderConditionPK pk ) throws DataFindException, DataQueryException, DataNetworkException {
        EnableOrderConditionRow row = findRowByPk( pk );
        return forRow( row );
    }


    //===========================================================================
    //
    // Fetch Rows related by foreign key
    //
    //===========================================================================


      // (this object has no foreign keys)


    //===========================================================================
    //
    // Find Rows or Daos given index values
    //
    //===========================================================================

    //------------------------------------------------------
    // Find Rows given unique index values
    //------------------------------------------------------

        // (none) 

    //------------------------------------------------------
    // Find Rows given non-unique index values
    //------------------------------------------------------

        // (none) 

}
@
