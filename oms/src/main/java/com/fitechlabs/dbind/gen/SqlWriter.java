// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   SqlWriter.java

package com.fitechlabs.dbind.gen;

import java.io.*;
import java.util.*;

// Referenced classes of package com.fitechlabs.dbind.gen:
//            TableSpec, ColumnSpec, ForeignKeySpec, Settings, 
//            DataSpec

public class SqlWriter
{

    public SqlWriter(String path)
    {
        this.path = Settings.getAbsPath(path);
    }

    public void write(DataSpec ds)
        throws IOException
    {
        int i = path.lastIndexOf('/');
        if(i > 0)
        {
            String dir = path.substring(0, i);
            (new File(dir)).mkdirs();
        }
        System.out.println("creating " + path);
        PrintWriter pw = new PrintWriter(new FileOutputStream(path));
        pw.println("-- xTrade autogenerated sql schema file");
        pw.println();
        pw.println("-- --------------------------------------------------------");
        pw.println("-- Tables");
        pw.println("-- --------------------------------------------------------");
        pw.println();
        Enumeration et = ds.getTableSpecElements();
        do
        {
            if(!et.hasMoreElements())
                break;
            TableSpec ts = (TableSpec)et.nextElement();
            pw.println("CREATE TABLE " + ts.asHeader() + " (");
            ColumnSpec cs;
            for(Enumeration ec = ts.getColumnElements(); ec.hasMoreElements(); pw.println("       " + cs.asHeader() + "\t" + getSqlSpec(ts, cs) + "\t" + (cs.getIsNullable() ? "NULL" : "NOT NULL") + (ec.hasMoreElements() ? "," : "")))
                cs = (ColumnSpec)ec.nextElement();

            pw.println(");");
            pw.println();
            if(ts.hasPrimaryKeyComponents())
            {
                pw.println("ALTER TABLE " + ts.asHeader());
                pw.println("       ADD  ( CONSTRAINT XPK" + ts.asHeader() + " PRIMARY KEY (");
                pw.print("              ");
                ColumnSpec cs;
                for(Enumeration ec = ts.getPrimaryKeyComponents(); ec.hasMoreElements(); pw.print(cs.asHeader() + (ec.hasMoreElements() ? ", " : "")))
                    cs = (ColumnSpec)ec.nextElement();

                pw.println(") ) ;");
                pw.println();
            }
        } while(true);
        pw.println("-- --------------------------------------------------------");
        pw.println("-- Tables");
        pw.println("-- --------------------------------------------------------");
        pw.println();
        for(et = ds.getTableSpecElements(); et.hasMoreElements();)
        {
            TableSpec ts = (TableSpec)et.nextElement();
            Enumeration fe = ts.getForeignKeySpecs();
            while(fe.hasMoreElements()) 
            {
                ForeignKeySpec fks = (ForeignKeySpec)fe.nextElement();
                if(fks.isValid())
                {
                    TableSpec fkts = fks.getForeignTable();
                    List list = fks.getLocalColumnsInForeignPkOrder();
                    pw.println("ALTER TABLE " + ts.asHeader());
                    pw.println("       ADD  ( CONSTRAINT " + fks.getName());
                    pw.print("              FOREIGN KEY (");
                    ColumnSpec fkcs;
                    for(Iterator it = list.iterator(); it.hasNext(); pw.print(fkcs.asHeader() + (it.hasNext() ? ", " : "")))
                        fkcs = (ColumnSpec)it.next();

                    pw.println(")");
                    pw.println("              REFERENCES " + fkts.asHeader() + " ) ;");
                    pw.println();
                }
            }
        }

        pw.close();
    }

    private String getSqlSpec(TableSpec ts, ColumnSpec cs)
    {
        String base = "BINARY";
        int sqlType = cs.getSqlType();
        switch(sqlType)
        {
        case -7: 
            return "boolean";

        case -6: 
        case -5: 
        case 2: // '\002'
        case 3: // '\003'
        case 4: // '\004'
        case 5: // '\005'
        case 6: // '\006'
        case 7: // '\007'
        case 8: // '\b'
            base = "number";
            break;

        case -1: 
        case 1: // '\001'
        case 12: // '\f'
            base = "varchar2";
            break;

        case 91: // '['
        case 92: // '\\'
        case 93: // ']'
            return "date";

        default:
            System.err.println("** table " + ts.asHeader() + ", column \"" + cs.asHeader() + "\":");
            System.err.println("**   unknown sql type value java.sql.Types == " + sqlType);
            break;
        }
        int len = cs.columnSize();
        int pre = cs.decimalDigits();
        return len > 0 ? pre > 0 ? base + "(" + len + "," + pre + ")" : base + "(" + len + ")" : base;
    }

    String path;
}
