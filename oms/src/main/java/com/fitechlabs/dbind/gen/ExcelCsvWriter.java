// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ExcelCsvWriter.java

package com.fitechlabs.dbind.gen;

import java.io.*;
import java.util.Enumeration;

// Referenced classes of package com.fitechlabs.dbind.gen:
//            TableSpec, ColumnSpec, DataSpec

public class ExcelCsvWriter
{

    public ExcelCsvWriter(String path)
    {
        this.path = path;
    }

    public void write(DataSpec ds)
        throws IOException
    {
        PrintWriter pw = new PrintWriter(new FileOutputStream(path));
        pw.println("dao.csv: autogenerated list of table/column specs");
        pw.println();
        for(Enumeration et = ds.getTableSpecElements(); et.hasMoreElements();)
        {
            TableSpec ts = (TableSpec)et.nextElement();
            Enumeration ec = ts.getColumnElements();
            while(ec.hasMoreElements()) 
            {
                ColumnSpec cs = (ColumnSpec)ec.nextElement();
                pw.println(ts.asHeader() + "," + cs.asHeader() + "," + toDBType(cs.getSqlType(), cs.columnSize(), cs.decimalDigits()) + "," + (cs.getIsNullable() ? "NULL" : "NOT NULL") + "," + (cs.getIsPrimaryKeyComponent() ? "Yes" : "No") + "," + (cs.getForeignTableName() == null ? "No" : "Yes") + "," + (cs.getForeignTableName() == null ? " " : cs.getForeignTableName()) + "," + (cs.getForeignColumnName() == null ? " " : cs.getForeignColumnName()));
            }
        }

        pw.close();
    }

    private String toDBType(int sqlType, int size, int digits)
    {
        switch(sqlType)
        {
        case 91: // '['
            return "DATE";

        case 92: // '\\'
            return "TIME";

        case 93: // ']'
            return "TIMESTAMP";

        case 4: // '\004'
            return digits <= 0 ? "INTEGER(" + size + ")" : "\"INTEGER(" + size + "," + digits + ")\"";

        case 3: // '\003'
            return digits <= 0 ? "DECIMAL(" + size + ")" : "\"DECIMAL(" + size + "," + digits + ")\"";

        case 2: // '\002'
            return digits <= 0 ? "NUMERIC(" + size + ")" : "\"NUMERIC(" + size + "," + digits + ")\"";

        case 12: // '\f'
            return "VARCHAR(" + size + ")";
        }
        System.err.println("** unexpected sql type in conversion to DBType string: " + sqlType);
        return "VARCHAR(20)";
    }

    String path;
}
